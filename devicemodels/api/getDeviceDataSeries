/**
 * Get historical data of a given id
 * @param {String} id: the identifier of the device to load
 * @param {String} field: optional, if defined, script only returns the latest value of this field in a device
 * @param {Number} page: optional, if defined, instructs to load the data series documents at the given page. Defaults to 1
 * @return {Object} [{field:value, etc.}, {field:value, etc.}, ...}
 */ 

try {
  
  require("/modules/framr/Framr").init(this, {classPath: "modules/;"});
  import("devicemodels.demoApp.model.Car");
  import("agnes.VersionableDeviceRepositoryAdaptor");

  var id = request.parameters.id;
  if (!id){
    return {};
  }

  var field = request.parameters.field;
  if (!field){
    field = request.body ? request.body.field : "";
  }

  var adaptor = new VersionableDeviceRepositoryAdaptor();
  var deviceDataSeries = adaptor.loadDataSeries(id);
  var dataSeries = [];
  if (field) {
   
    for (var i = 0; deviceDataSeries && i < deviceDataSeries.length; i++) {
      
      var deviceData = deviceDataSeries[i];
      var output = {};
      output["time"] = deviceData.lastModifiedDate;
      output[field] = deviceData[field];
      dataSeries.push(output);
    }
    
    return dataSeries;
  }
 
  // else
  for (var i = 0; deviceDataSeries && i < deviceDataSeries.length; i++) {
  
    var deviceData = deviceDataSeries[i];
    var output = {};
    output["time"] = deviceData.lastModifiedDate;
    for (var key in deviceData) {
      
      if (["key", "lastModifiedBy", "creationDate", "cls", "versionNumber", "meta.types"].indexOf(key) < 0) {
        output[key] = deviceData[key];
      }      
    }
    
    dataSeries.push(output);
  }
  
  return dataSeries;
}catch(exception){
  
  var log = require("log"); 
  log.setLevel("info");
  log.error("Exception occured while invoking devicemodels/api/getDeviceDataSeries:\n " + JSON.stringify(exception));
  return {};
}