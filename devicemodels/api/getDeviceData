/**
 * Get device data
 * @param {String} id: the identifier of the device to load
 * @param {String} field: optional, if defined, script only returns the latest value of this field in a device
 * @retun {Object} {field:value, etc.}
 */ 

var config =  require("../config");
var DEFAULT_CHANNEL = "responseChannel";

try {
 
  require("/modules/framr/Framr").init(this, {classPath: "modules/;modules/devicemodels/demoApp/;"});
  import("devicemodels.DeviceFactory");
  import("agnes.VersionableDeviceRepositoryAdaptor");

  //check search criteria
  var params = {};
  if(request.body != null){
    params = request.body;
  }else if(request.parameters.body){
    params = request.parameters.body;
  }else {
    params = request.parameters;
  }
  
  if(typeof params == 'string' && params != null){
    try{
      params = JSON.parse(params);   
    }catch(e){
      return "INVALID OR MISSING PARAMETER";
    }
  }

  var id = params.id;
  if (!id){
    return "MISSING 'id' PARAMETER";;
  }

  var field = params.field;
  if (!field){
    return "MISSING 'field' PARAMETER";;
  }
  
  var method = params.method;
  
  /*
   * load device from id
   */
  var adaptor = new VersionableDeviceRepositoryAdaptor();
  var deviceFactory = new devicemodels.DeviceFactory({adaptor: adaptor});
  var device = deviceFactory.load(id); 
  
  /*
   * if no method specified, this is a simple get
   */
  if (!method) {

    var deviceData = device.metadata;
    var output = {};
    output[field] = deviceData[field];
    var dev = {
      id: deviceData.id,
      cls: deviceData.cls      
    }
    
    dev[field] = deviceData[field];
    publishUpdate(dev);
    return output[field];
  }
  
  /*
   * if field + method, searching for data series
   */
  var deviceDataSeries = device[method](field);
  var dataSeries = [];
  var dev = {
    id: id
  };

  for (var i = 0; deviceDataSeries && i < deviceDataSeries.length; i++) {

    var deviceData = deviceDataSeries[i]; 
    var output = {};
    output["time"] = deviceData.lastModifiedDate;
    output[field] = deviceData[field];
    dataSeries.push(output);        
  }

  dev[field] = dataSeries; 
  publishUpdate(dev, "Historical");
  return dataSeries;
 
}catch(exception){
  
  var log = require("log"); 
  log.setLevel("info");
  log.error("Exception occured while invoking devicemodels/api/getDeviceData:\n" + JSON.stringify(exception));
  return {};
}

function publishUpdate(device, postfix) {
  
  /**
   * message = {id: deviceid.field, result: }
   * gauge, speedo, odo: result = value
   * charts (line, bar, ): result = [y, x, x]
   */
  
  var channel = config && config.channel ? config.channel : DEFAULT_UPDATE_CHANNEL;
  // var model = modelModule[device.cls];
  for (var key in device) {
    
    // var widgetObj = model ? model.attributes[key] : null;
    // var widgetType = widgetObj ? widgetObj.type : null;    
    if (["cls", "id", "vin", "make", "model", "year"].indexOf(key) < 0) {
      
      var msg = {};
      msg["id"] = ""+ device.id + "." + key + (postfix ? postfix : "");
      msg["result"] = device[key]; 
      publish(channel, JSON.stringify(msg));
    }    
  }  
}